# Rust workflow to build and package the launcher for Windows, macOS, and Linux.

name: Rust CI

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-windows:
    name: Windows x64
    runs-on: windows-2025
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r python/requirements.txt

      - name: Install dependencies
        run: choco install upx

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: windows-x64-allcache-${{ hashFiles('rust-toolchain.toml') }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: windows-x64-allcache-

      - name: Build Rust
        run: cargo build --release --locked --features "desktop"

      - name: Compress
        run: |
          upx --best --lzma target/release/DreamLauncher.exe

      - name: Install NSIS
        run: |
          choco install nsis -y

      - name: Create installer
        run: |
          mkdir dist
          powershell -ExecutionPolicy Bypass -File scripts/windows/build_installer.ps1 -Version "${{ github.ref_name || 'dev' }}"

      - name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          name: DreamLauncher-Windows-x64
          path: |
            dist/Dream Launcher Setup.exe

  build-windows-arm64:
    name: Windows ARM64
    runs-on: windows-2025
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r python/requirements.txt

      - name: Install Python libs path
        shell: pwsh
        run: |
          $pythonRoot = (python -c "import sys; print(sys.base_prefix)")
          $libPath = Join-Path $pythonRoot "libs"
          echo "Python libs path: $libPath"
          echo "LIB=$libPath;$env:LIB" | Out-File -FilePath $env:GITHUB_ENV -Append
          if (!(Test-Path (Join-Path $libPath "python3.lib"))) {
            Write-Host "python3.lib not found in $libPath"
            exit 1
          }

      - name: Install Rust ARM64 target
        run: rustup target add aarch64-pc-windows-msvc

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: windows-arm64-allcache-${{ hashFiles('rust-toolchain.toml') }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: windows-arm64-allcache-

      - name: Build Rust for ARM64
        run: cargo build --release --locked --features "desktop" --target aarch64-pc-windows-msvc

      - name: Install NSIS
        run: |
          choco install nsis -y

      - name: Create ARM64 installer
        run: |
          mkdir dist
          powershell -ExecutionPolicy Bypass -File scripts/windows/build_installer.ps1 -Version "${{ github.ref_name || 'dev' }}" -Architecture "ARM64"

      - name: Upload ARM64 installer
        uses: actions/upload-artifact@v4
        with:
          name: DreamLauncher-Windows-ARM64
          path: |
            dist/Dream Launcher Setup ARM64.exe

  build-linux:
    name: Linux
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r python/requirements.txt

      - name: Install dependencies
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: libgtk-3-dev libglib2.0-dev libsoup-3.0-dev libssl-dev libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev libxdo-dev pkg-config build-essential curl xdotool upx-ucl libfuse2
          version: 1

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: linux-allcache-${{ hashFiles('rust-toolchain.toml') }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: linux-allcache-

      - name: Build Rust
        run: cargo build --release --locked --features "desktop"

      - name: Compress
        run: |
          upx --best --lzma target/release/DreamLauncher

      - name: Install AppImage
        run: |
          sudo apt-get update
          sudo apt-get install -y file
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          sudo mv appimagetool-x86_64.AppImage /usr/local/bin/appimagetool

      - name: Create AppImage
        run: |
          chmod +x scripts/linux/appimage.sh
          ./scripts/linux/appimage.sh

      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: DreamLauncher-Linux-AppImage
          path: |
            *.AppImage

  build-macos:
    name: macOS
    runs-on: macos-15
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r python/requirements.txt

      - name: Install dependencies
        run: brew install create-dmg upx

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: macos-allcache-${{ hashFiles('rust-toolchain.toml') }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: macos-allcache-

      - name: Build Rust
        run: cargo build --release --locked --features "desktop"

      - name: Compress
        run: |
          chmod +x scripts/macos/compress.sh
          ./scripts/macos/compress.sh "target/release/DreamLauncher"

      - name: Package
        shell: bash
        run: |
          set -e
          mkdir -p dist
          chmod +x scripts/macos/bundle.sh
          ./scripts/macos/bundle.sh

          chmod +x scripts/macos/clean.sh
          ./scripts/macos/clean.sh "target/release/Dream Launcher.app"

          chmod +x scripts/macos/sign.sh
          ./scripts/macos/sign.sh "target/release/Dream Launcher.app"

          chmod +x scripts/macos/dmg.sh
          ./scripts/macos/dmg.sh
          if [[ -f "Dream Launcher.dmg" ]]; then
            mv "Dream Launcher.dmg" "dist/Dream Launcher.dmg"
            echo "DMG created successfully"
          else
            echo "No DMG file found"
            exit 1
          fi

          echo "macOS packaging completed"

      - name: Upload macOS
        uses: actions/upload-artifact@v4
        with:
          name: DreamLauncher-macOS
          path: |
            dist/Dream Launcher.dmg
