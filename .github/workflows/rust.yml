name: Rust CI

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-14, windows-2025]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deps (Windows)
        if: matrix.os == 'windows-2025'
        run: choco install upx

      - name: Deps (Linux)
        if: matrix.os == 'ubuntu-24.04'
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: libgtk-3-dev libglib2.0-dev libsoup-3.0-dev libssl-dev libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev libxdo-dev pkg-config build-essential curl xdotool upx-ucl
          version: 1

      - name: Deps (macOS)
        if: matrix.os == 'macos-14'
        run: brew install create-dmg upx

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-allcache-${{ hashFiles('rust-toolchain.toml') }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-allcache-

      - name: Build
        run: cargo build --release --locked --features "desktop"

      - name: Compress
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            upx --best --lzma target/release/DreamLauncher.exe
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            upx --best --lzma target/release/DreamLauncher
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            chmod +x scripts/compress-macos.sh
            ./scripts/compress-macos.sh target/release/DreamLauncher
          fi

      - name: Package
        shell: bash
        run: |
          set -e
          mkdir -p dist
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp target/release/DreamLauncher.exe dist/
            powershell -Command "Compress-Archive -Path dist/DreamLauncher.exe -DestinationPath DreamLauncher-Windows.zip"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            chmod +x scripts/create_app_bundle.sh
            ./scripts/create_app_bundle.sh

            echo "Removing extended attributes and quarantine flags from app bundle..."
            find "target/release/Dream Launcher.app" -type f -exec xattr -c {} \; 2>/dev/null || true
            find "target/release/Dream Launcher.app" -type f -exec xattr -d com.apple.quarantine {} \; 2>/dev/null || true

            chmod -R 755 "target/release/Dream Launcher.app"
            chmod +x "target/release/Dream Launcher.app/Contents/MacOS/DreamLauncher"
            echo "Creating entitlements file..."
            cat > entitlements.plist <<'EOF'
            | <?xml version="1.0" encoding="UTF-8"?>
            | <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            | <plist version="1.0">
            | <dict>
            |   <key>com.apple.security.cs.allow-jit</key>
            |   <true/>
            |   <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
            |   <true/>
            |   <key>com.apple.security.cs.disable-library-validation</key>
            |   <true/>
            | </dict>
            | </plist>
            EOF
          
            echo "Signing application bundle..."
            codesign --force --deep --sign - --entitlements entitlements.plist --options runtime "target/release/Dream Launcher.app" || echo "codesign failed, continuing..."
            
            echo "Creating DMG..."
            if ! create-dmg --volname "Dream Launcher" --window-pos 200 120 --window-size 800 400 --icon-size 100 --icon "Dream Launcher.app" 200 190 --hide-extension "Dream Launcher.app" --app-drop-link 600 185 --no-internet-enable "DreamLauncher-macOS.dmg" "target/release/Dream Launcher.app" 2>/dev/null; then
              echo "create-dmg failed, using hdiutil as fallback..."
              hdiutil create -volname "Dream Launcher" -srcfolder "target/release/Dream Launcher.app" -ov -format UDZO "DreamLauncher-macOS.dmg"
            fi
            
            echo "Processing DMG file..."
            if [[ -f "DreamLauncher-macOS.dmg" ]]; then
              xattr -c "DreamLauncher-macOS.dmg" 2>/dev/null || echo "xattr -c failed, continuing..."
              xattr -d com.apple.quarantine "DreamLauncher-macOS.dmg" 2>/dev/null || echo "xattr -d failed, continuing..."
              codesign --force --sign - "DreamLauncher-macOS.dmg" || echo "codesign DMG failed, continuing..."
            else
              echo "DMG file not found, skipping xattr/codesign for DMG"
            fi
            
            spctl --add --label "DreamLauncher-CI" "target/release/Dream Launcher.app" 2>/dev/null || echo "spctl add failed (that's okay)"
            
            echo "macOS packaging completed"
          else
            cp target/release/DreamLauncher dist/
            zip -j DreamLauncher-linux.zip dist/DreamLauncher
          fi

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: DreamLauncher-${{ runner.os }}
          path: |
            DreamLauncher-*.zip
            DreamLauncher-*.dmg
