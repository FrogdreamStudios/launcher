name: CI

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  windows:
    name: Windows
    runs-on: windows-2025
    strategy:
      matrix:
        format: [ x64, arm64 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup icon
        run: |
          mkdir -p icons
          cp assets/icons/app_icon.ico icons/icon.ico
        shell: bash

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r python/requirements.txt

      - name: Setup Python libs
        if: matrix.format == 'arm64'
        shell: pwsh
        run: |
          $pythonRoot = (python -c "import sys; print(sys.base_prefix)")
          $libPath = Join-Path $pythonRoot "libs"
          echo "LIB=$libPath;$env:LIB" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: win-${{ matrix.format }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: win-${{ matrix.format }}-

      - name: Install cargo-binstall
        shell: pwsh
        run: |
          $BinDir = "$env:USERPROFILE\.cargo\bin"
          if (!(Test-Path $BinDir)) { New-Item -ItemType Directory -Path $BinDir | Out-Null }
          iwr https://github.com/cargo-bins/cargo-binstall/releases/latest/download/cargo-binstall-x86_64-pc-windows-msvc.zip -OutFile binstall.zip
          Expand-Archive binstall.zip -DestinationPath $BinDir -Force
          echo "$BinDir" | Out-File -FilePath $env:GITHUB_PATH -Append

      - name: Install Rust
        if: matrix.format == 'arm64'
        run: |
          rustup update stable
          rustup target add aarch64-pc-windows-msvc
          rustup component add rust-src

      - name: Install dx
        shell: pwsh
        run: cargo binstall dioxus-cli --version 0.7.0-rc.0 -y

      - name: Build
        run: |
            dx bundle --release --platform desktop
        shell: bash

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: dreamlauncher-windows-${{ matrix.format }}
          path: target/dx/DreamLauncher/bundle/windows/*.exe

  linux:
    name: Linux
    runs-on: ubuntu-24.04
    continue-on-error: true
    strategy:
      matrix:
        format: [ deb, rpm ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r python/requirements.txt

      - name: Install cargo-binstall
        run: |
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Install dx
        run: cargo binstall dioxus-cli --version 0.7.0-rc.0 -y

      - name: Install deps
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: libgtk-3-dev libglib2.0-dev libsoup-3.0-dev libssl-dev libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev libxdo-dev pkg-config build-essential curl xdotool fuse libfuse2 desktop-file-utils appstream file
          version: 1

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: linux-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.format }}-${{ github.run_id }}
          restore-keys: linux-

      - name: Install Rust
        run: rustup update stable

      - name: Build
        run: |
          export NO_STRIP=true
          dx bundle --verbose --trace --release --platform desktop --package-types ${{ matrix.format }}

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: dreamlauncher-linux-${{ matrix.format }}
          path: target/dx/DreamLauncher/bundle/linux/bundle/${{ matrix.format }}/*.${{ matrix.format }}

  macos:
    name: macOS
    runs-on: macos-15
    strategy:
      matrix:
        format: [ dmg ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r python/requirements.txt

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/dx
            ~/.cargo/bin/cargo-binstall
          key: macos-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: macos-

      - name: Install cargo-binstall
        run: |
          if [ ! -f ~/.cargo/bin/cargo-binstall ]; then
            curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
          fi

      - name: Install dx
        run: |
          if [ ! -f ~/.cargo/bin/dx ]; then
            cargo binstall dioxus-cli --version 0.7.0-rc.0 -y || cargo install dioxus-cli --version 0.7.0-rc.0
          fi

      - name: Build and Create DMG
        run: |
          # Build the app
          dx bundle --release --platform desktop
          
          # Find the built .app file
          APP_SOURCE=$(find target/dx/DreamLauncher/bundle/macos/bundle/macos -name "*.app" | head -1)
          if [ -z "$APP_SOURCE" ]; then
            echo "No .app file found after build"
            exit 1
          fi
          
          # Copy app to temporary location for modification
          cp -R "$APP_SOURCE" "/tmp/DreamLauncher.app"
          APP_PATH="/tmp/DreamLauncher.app"
          
          # Remove ALL existing signatures recursively first
          echo "Removing all existing signatures..."
          find "$APP_PATH" -name "*.dylib" -exec codesign --remove-signature {} \; 2>/dev/null || true
          find "$APP_PATH" -name "*.so" -exec codesign --remove-signature {} \; 2>/dev/null || true
          codesign --remove-signature "$APP_PATH/Contents/MacOS/DreamLauncher" 2>/dev/null || true
          codesign --remove-signature "$APP_PATH" 2>/dev/null || true
          
          # Create Frameworks directory
          mkdir -p "$APP_PATH/Contents/Frameworks"
          
          # Copy Python framework
          PYTHON_VERSION=$(python3 --version | cut -d' ' -f2 | cut -d'.' -f1-2)
          FRAMEWORK_ROOT="$APP_PATH/Contents/Frameworks/Python.framework"
          FRAMEWORK_PATH="$FRAMEWORK_ROOT/Versions/$PYTHON_VERSION"
          mkdir -p "$FRAMEWORK_PATH"
          
          # Use the Python from GitHub Actions
          PYTHON_ROOT=$(python -c "import sys; print(sys.base_prefix)")
          # Copy only the dynamic library, not everything
          find "$PYTHON_ROOT" -name "libpython$PYTHON_VERSION*.dylib" -exec cp {} "$FRAMEWORK_PATH/Python" \; 2>/dev/null || true
          if [ ! -f "$FRAMEWORK_PATH/Python" ]; then
            cp "$PYTHON_ROOT/bin/python$PYTHON_VERSION" "$FRAMEWORK_PATH/Python" 2>/dev/null || true
          fi
          
          # Create framework structure
          if [ -f "$FRAMEWORK_PATH/Python" ]; then
            cd "$FRAMEWORK_ROOT"
            ln -sf "$PYTHON_VERSION" "Versions/Current"
            ln -sf "Versions/Current/Python" "Python"
            
            # Create Resources directory and Info.plist for proper framework structure
            mkdir -p "$FRAMEWORK_PATH/Resources"
            cat > "$FRAMEWORK_PATH/Resources/Info.plist" << 'EOF'
            <?xml version="1.0" encoding="UTF-8"?>
            <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
            <plist version="1.0">
            <dict>
              <key>CFBundleIdentifier</key>
              <string>org.python.python</string>
              <key>CFBundleName</key>
              <string>Python</string>
              <key>CFBundleVersion</key>
              <string>$PYTHON_VERSION</string>
              <key>CFBundleShortVersionString</key>
              <string>$PYTHON_VERSION</string>
              <key>CFBundlePackageType</key>
              <string>FMWK</string>
              <key>CFBundleExecutable</key>
              <string>Python</string>
            </dict>
            </plist>
            EOF
            
            # Create link to Resources
            ln -sf "Versions/Current/Resources" "Resources"
            
            # Sign the Python library with ad-hoc signature
            echo "Signing Python library..."
            codesign -f -s - "$FRAMEWORK_PATH/Python" 2>/dev/null || true
            
            # Return to workspace directory
            cd "$GITHUB_WORKSPACE"
          fi
          
          # Copy icon file to Resources
          if [ -f "assets/icons/app_icon.icns" ]; then
            cp "assets/icons/app_icon.icns" "$APP_PATH/Contents/Resources/icon.icns"
          fi
          
          # Update Info.plist
          /usr/libexec/PlistBuddy -c "Set :CFBundleDisplayName 'Dream Launcher'" "$APP_PATH/Contents/Info.plist" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Set :CFBundleName 'Dream Launcher'" "$APP_PATH/Contents/Info.plist" 2>/dev/null || true
          /usr/libexec/PlistBuddy -c "Set :CFBundleIconFile icon.icns" "$APP_PATH/Contents/Info.plist" 2>/dev/null || true
          
          # Update install names if Python framework exists
          EXECUTABLE="$APP_PATH/Contents/MacOS/DreamLauncher"
          if [ -f "$FRAMEWORK_PATH/Python" ]; then
            install_name_tool -change "/Library/Frameworks/Python.framework/Versions/$PYTHON_VERSION/Python" "@executable_path/../Frameworks/Python.framework/Versions/$PYTHON_VERSION/Python" "$EXECUTABLE" 2>/dev/null || true
          fi
          
          # Sign everything step by step in correct order
          if [ -d "$FRAMEWORK_ROOT" ]; then
            echo "Signing Python framework..."
            codesign -f -s - "$FRAMEWORK_ROOT" 2>/dev/null || true
          fi
          
          echo "Signing executable..."
          codesign -f -s - "$EXECUTABLE" 2>/dev/null || true
          
          echo "Signing application bundle with deep flag..."
          codesign -f --deep -s - "$APP_PATH" 2>/dev/null || true
          
          # Ensure we're in the workspace directory before creating DMG
          cd "$GITHUB_WORKSPACE"
          echo "Creating DMG in $(pwd)..."
          hdiutil create -volname "Dream Launcher" -srcfolder "$APP_PATH" -ov -format UDZO "DreamLauncher.dmg"
          
          # Verify DMG was created
          if [ -f "DreamLauncher.dmg" ]; then
            echo "DMG created successfully: $(ls -la DreamLauncher.dmg)"
          else
            echo "ERROR: DMG was not created in the expected location"
            find . -name "*.dmg" -type f 2>/dev/null || echo "No DMG files found"
          fi
          
          # Clean up
          rm -rf "$APP_PATH"

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: dreamlauncher-macos-dmg
          path: "DreamLauncher.dmg"
