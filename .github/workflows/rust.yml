name: CI

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  windows:
    name: Windows
    runs-on: windows-2025
    strategy:
      matrix:
        format: [ x64, arm64 ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup icon
        run: |
          mkdir -p icons
          cp assets/icons/app_icon.ico icons/icon.ico
        shell: bash

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r python/requirements.txt

      - name: Setup Python libs
        if: matrix.format == 'arm64'
        shell: pwsh
        run: |
          $pythonRoot = (python -c "import sys; print(sys.base_prefix)")
          $libPath = Join-Path $pythonRoot "libs"
          echo "LIB=$libPath;$env:LIB" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: win-${{ matrix.format }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: win-${{ matrix.format }}-

      - name: Install cargo-binstall
        shell: pwsh
        run: |
          $BinDir = "$env:USERPROFILE\.cargo\bin"
          if (!(Test-Path $BinDir)) { New-Item -ItemType Directory -Path $BinDir | Out-Null }
          iwr https://github.com/cargo-bins/cargo-binstall/releases/latest/download/cargo-binstall-x86_64-pc-windows-msvc.zip -OutFile binstall.zip
          Expand-Archive binstall.zip -DestinationPath $BinDir -Force
          echo "$BinDir" | Out-File -FilePath $env:GITHUB_PATH -Append

      - name: Install Rust
        if: matrix.format == 'arm64'
        run: |
          rustup update stable
          rustup target add aarch64-pc-windows-msvc
          rustup component add rust-src

      - name: Install dx
        shell: pwsh
        run: cargo binstall dioxus-cli --version 0.7.0-rc.0 -y

      - name: Build
        run: |
            dx bundle --release --platform desktop
        shell: bash

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: dreamlauncher-windows-${{ matrix.format }}
          path: target/dx/DreamLauncher/bundle/windows/*.exe

  linux:
    name: Linux
    runs-on: ubuntu-24.04
    continue-on-error: true
    strategy:
      matrix:
        format: [ deb, rpm ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r python/requirements.txt

      - name: Install cargo-binstall
        run: |
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Install dx
        run: cargo binstall dioxus-cli --version 0.7.0-rc.0 -y

      - name: Install deps
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: libgtk-3-dev libglib2.0-dev libsoup-3.0-dev libssl-dev libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev libxdo-dev pkg-config build-essential curl xdotool fuse libfuse2 desktop-file-utils appstream file
          version: 1

      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup
            ~/.cargo/bin
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: linux-${{ hashFiles('**/Cargo.lock') }}-${{ matrix.format }}-${{ github.run_id }}
          restore-keys: linux-

      - name: Install Rust
        run: rustup update stable

      - name: Build
        run: |
          export NO_STRIP=true
          dx bundle --verbose --trace --release --platform desktop --package-types ${{ matrix.format }}

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: dreamlauncher-linux-${{ matrix.format }}
          path: target/dx/DreamLauncher/bundle/linux/bundle/${{ matrix.format }}/*.${{ matrix.format }}

  macos-app:
    name: macOS
    runs-on: macos-15
    strategy:
      matrix:
        format: [ dmg ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"
      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r python/requirements.txt
      - name: Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/dx
            ~/.cargo/bin/cargo-binstall
          key: macos-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: macos-
      - name: Install cargo-binstall
        run: |
          if [ ! -f ~/.cargo/bin/cargo-binstall ]; then
            curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash
          fi
      - name: Install dx
        run: |
          if [ ! -f ~/.cargo/bin/dx ]; then
            cargo binstall dioxus-cli --version 0.7.0-rc.0 -y || cargo install dioxus-cli --version 0.7.0-rc.0
          fi

      - name: Build
        run: |
          dx bundle --release --platform desktop --package-types dmg
      
      - name: Embed Python Framework
        run: |
          # Find the DMG file
          DMG_PATH=$(find target/dx/DreamLauncher/bundle/macos/bundle/dmg -name "*.dmg" | head -1)
          if [ -n "$DMG_PATH" ]; then
            # Mount DMG and copy app to temporary location
            hdiutil attach "$DMG_PATH" -mountpoint /tmp/dmg_mount
            cp -R "/tmp/dmg_mount/DreamLauncher.app" "/tmp/DreamLauncher_modified.app"
            hdiutil detach /tmp/dmg_mount
            
            APP_PATH="/tmp/DreamLauncher_modified.app"
            
            # Create Frameworks directory
            mkdir -p "$APP_PATH/Contents/Frameworks"
            
            # Copy Python framework
            PYTHON_FRAMEWORK="/Library/Frameworks/Python.framework"
            if [ -d "$PYTHON_FRAMEWORK" ]; then
              cp -R "$PYTHON_FRAMEWORK" "$APP_PATH/Contents/Frameworks/"
            else
              # Use the Python from GitHub Actions
              PYTHON_ROOT=$(python -c "import sys; print(sys.base_prefix)")
              mkdir -p "$APP_PATH/Contents/Frameworks/Python.framework/Versions/3.13"
              cp -R "$PYTHON_ROOT"/* "$APP_PATH/Contents/Frameworks/Python.framework/Versions/3.13/"
              ln -sf "3.13" "$APP_PATH/Contents/Frameworks/Python.framework/Versions/Current"
              ln -sf "Versions/Current/Python" "$APP_PATH/Contents/Frameworks/Python.framework/Python"
            fi
            
            # Update install names to use embedded framework
            install_name_tool -change "/Library/Frameworks/Python.framework/Versions/3.13/Python" "@executable_path/../Frameworks/Python.framework/Versions/3.13/Python" "$APP_PATH/Contents/MacOS/DreamLauncher"
            
            # Recreate DMG with embedded Python
            rm "$DMG_PATH"
            hdiutil create -volname "DreamLauncher" -srcfolder "$APP_PATH" -ov -format UDZO "$DMG_PATH"
            
            # Clean up temporary app
            rm -rf "$APP_PATH"
          fi
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: dreamlauncher-macos-${{ matrix.format }}
          path: target/dx/DreamLauncher/bundle/macos/bundle/dmg/*.dmg
