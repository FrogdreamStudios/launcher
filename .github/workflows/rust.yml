# Basic workflow for building Dream Launcher on Windows, Linux and macOS.

name: Rust CI

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-14, windows-2025]
    steps:
      - uses: actions/checkout@v4
      - if: matrix.os == 'ubuntu-24.04'
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: libgtk-3-dev libglib2.0-dev libsoup-3.0-dev libssl-dev libjavascriptcoregtk-4.1-dev libwebkit2gtk-4.1-dev libxdo-dev pkg-config build-essential curl xdotool upx-ucl
          version: 1
      - if: matrix.os == 'macos-14'
        run: brew install create-dmg upx
      - if: matrix.os == 'windows-2025'
        run: choco install upx
      - uses: actions/cache@v4
        with:
          path: |
            ~/.rustup
            ~/.cargo/bin
          key: ${{ runner.os }}-rustup-${{ hashFiles('rust-toolchain.toml') }}
          restore-keys: ${{ runner.os }}-rustup-
      - uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-registry-
      - uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-git-
      - uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}-desktop
          restore-keys: ${{ runner.os }}-target-
      - run: rustup show
      - run: cargo build --release --locked --features "desktop"
      - shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            upx --best --lzma target/release/DreamLauncher.exe
          elif [[ "${{ runner.os }}" == "Linux" ]]; then
            upx --best --lzma target/release/DreamLauncher
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            chmod +x scripts/compress-macos.sh
            ./scripts/compress-macos.sh target/release/DreamLauncher
          fi
      - shell: bash
        run: |
          mkdir -p dist
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp target/release/DreamLauncher.exe dist/
            powershell -Command "Compress-Archive -Path dist/DreamLauncher.exe -DestinationPath DreamLauncher-windows.zip"
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            chmod +x scripts/create_app_bundle.sh
            ./scripts/create_app_bundle.sh
            find "target/release/Dream Launcher.app" -exec xattr -d com.apple.quarantine {} \; 2>/dev/null || true
            codesign --force --deep --sign - "target/release/Dream Launcher.app"
            create-dmg --volname "Dream Launcher" --window-pos 200 120 --window-size 800 400 --icon-size 100 --icon "Dream Launcher.app" 200 190 --hide-extension "Dream Launcher.app" --app-drop-link 600 185 "DreamLauncher-macOS.dmg" "target/release/Dream Launcher.app" 2>/dev/null || hdiutil create -volname "Dream Launcher" -srcfolder "target/release/Dream Launcher.app" -ov -format UDZO "DreamLauncher-macOS.dmg"
            codesign --force --sign - "DreamLauncher-macOS.dmg"
          else
            cp target/release/DreamLauncher dist/
            zip -j DreamLauncher-linux.zip dist/DreamLauncher
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: DreamLauncher-${{ runner.os }}
          path: |
            DreamLauncher-*.zip
            DreamLauncher-*.dmg
