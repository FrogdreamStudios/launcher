name: Rust CI

on:
  push:
    branches: [main, chore/modularize-codebase]
  pull_request:
    branches: [main, chore/modularize-codebase]

jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-24.04, macos-14, windows-2025]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Dependencies
        if: matrix.os == 'ubuntu-24.04'
        uses: awalsh128/cache-apt-pkgs-action@v1
        with:
          packages: >
            libgtk-3-dev
            libglib2.0-dev
            libsoup-3.0-dev
            libssl-dev
            libjavascriptcoregtk-4.1-dev
            libwebkit2gtk-4.1-dev
            libxdo-dev
            pkg-config
            build-essential
            curl
            xdotool
          version: 1

      - name: Cache Rust
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup
            ~/.cargo/bin
          key: ${{ runner.os }}-rustup-${{ hashFiles('rust-toolchain.toml') }}
          restore-keys: |
            ${{ runner.os }}-rustup-

      - name: Cache Cargo Registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-registry-

      - name: Cache Cargo Git
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-git-

      - name: Cache Target Dir
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}-desktop
          restore-keys: |
            ${{ runner.os }}-target-

      - name: Setup Rust
        run: rustup show

      - name: Build
        shell: bash
        run: |
          cargo build --release --locked --features "desktop"

      - name: Package
        shell: bash
        run: |
          mkdir dist
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp target/release/DreamLauncher.exe dist/
            powershell -Command "Compress-Archive -Path dist/DreamLauncher.exe -DestinationPath DreamLauncher-windows.zip"
          else
            cp target/release/DreamLauncher dist/
            zip -j DreamLauncher-${{ runner.os }}.zip dist/DreamLauncher
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: DreamLauncher-${{ runner.os }}
          path: DreamLauncher-*.zip

  upload-artifacts:
    name: Artifacts
    runs-on: ubuntu-24.04
    needs: build
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: List artifacts
        run: ls -R all-artifacts